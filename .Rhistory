}else{
newData<-otherCov
}
if("rfsrc" %in% class(trainModel)){
newData[,trainModel$yvar.names[2]]<-as.integer(newData[,trainModel$yvar.names[2]])
}
data2<-data.frame(rbind(data,newData))
match_types(data,data2)
newData2<-data.frame(data2[nrow(data2),])
newData2<-newData2[rep(1,nCovEval),]
cov<-quantile(data[,contCov],0.025)+(quantile(data[,contCov],0.975)-quantile(data[,contCov],0.025))*(0:(nCovEval-1))/(nCovEval-1)
newData2[,contCov]<-cov
print(str(newData2))
if("rfsrc" %in% class(trainModel)){
predObject<-predict(trainModel,newData2)
predictOutcome<-predObject$survival #column are times
time<-predObject$time.interest
}else{
predictOutcome<-predict(trainModel,newData2,type="survival")
time<-as.numeric(colnames(predictOutcome))
}
cHaz<--log(predictOutcome)
print(dim(cHaz))
print(length(time))
haz<-colDeri(cHaz,time)
loghaz<-log(haz)
loghr<-rowDeri(cHaz,cov)
if(is.null(contCovName)){
contCovName<-contCov
}
s<-drawContour(time[-length(time)],
cov[-length(cov)],
loghr,contCovName)
if(blue=TRUE){
source("pySurv.R")
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp")
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",blur=TRUE)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",blur=TRUE)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",blur=TRUE,sigma=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radius=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radius=5)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radiusx=5,radiusy=2)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radiusx=5,radiusy=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,sigma=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,sigma=3)
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radiusx=3,radiusy=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radiusx=3,radiusy=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radiusx=3,radiusy=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radiusx=3,radiusy=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radiusx=3,radiusy=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radiusx=3,radiusy=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radiusx=3,radiusy=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radiusx=3,radiusy=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,radiusx=3,radiusy=3)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,spanx=0.1,spany=0.1)
hrPlot
source("pySurv.R")
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,spanx=0.3,spany=0.1)
hrPlot
hrPlot<-hrContour(data,trainModel,"resp",smooth=TRUE,spanx=0.1,spany=0.3)
hrPlot
library(shiny)
library(riskRegression)
library(prodlim)
library(survival)
library(intccr)
library(viridis)
library(zip)
library(mets)
library(magick)
library(fields)
library(spatstat.utils)
library(rhandsontable)
library(plotly)
library(jsonlite)
library(flexsurv)
library(rlist)
library(dplyr)
library(randomForestSRC)
shinyServer(function(input, output,session) {
output$noCompSelect <- renderUI({
if(identical(input$CoxorFG,"noComp")){
selectInput("noCompSelect",
"Choose which model to use",
c("Cox" = "Cox",
"Random Survival Forest"="rf",
"Spline"="Spline",
"parametric generalized Gamma AFT" = "gengamma.orig",
"parametric stable generalized Gamma AFT" = "gengamma",
"parametric Weibull AFT" = "weibull",
"parametric Log-logistic AFT" = "llogis",
"parametric Log-Normal AFT" = "lnorm"), selected="Cox")}
})
output$numTree <- renderUI({
if(identical(input$noCompSelect,"rf")){
numericInput("numTree", "Number of trees:", value = 500)
}
})
output$intCen <- renderUI({
if(!identical(input$CoxorFG,"noComp")||identical(input$noCompSelect,"Cox")){
radioButtons("intCen", "Do your data have interval censored observation(s)?",
list("No, my data don't have interval censored observation(s)." = "noint",
"Yes, my data do have interval censored observation(s)." = "int"),
selected="noint")}
})
output$strata <- renderUI({
if(identical(input$CoxorFG,"noComp")&(identical(input$noCompSelect,"Cox"))){
radioButtons("strata", "Do your need a stratified Cox model?",
list("No, I do not need to stratify my analysis."="no",
"Yes, I do want to stratify my analysis."="yes"),
selected="no")
}
})
output$downloadData <- downloadHandler(
filename = "example.csv",
content=function(file){
if(identical(input$CoxorFG,"noComp")){
if(identical(input$intCen,"noint")){
if(identical(input$strata,"yes")){
load("veteran2.RData")
write.csv(veteran, file,row.names = FALSE)
}else{
load("veteran.RData")
write.csv(veteran, file,row.names = FALSE)
}
}else{
if(identical(input$strata,"yes")){
load("bcdeter2.RData")
write.csv(bcdeter, file,row.names = FALSE)
}else{
load("bcdeter.RData")
write.csv(bcdeter, file,row.names = FALSE)
}
}
}else{
if(identical(input$intCen,"noint")){
load("Paquid.RData")
write.csv(Paquid, file,row.names = FALSE)
}else{
load("sim1234.RData")
write.csv(newdata, file,row.names = FALSE)
}
}
}
)
source("readInRcode/filedata.R",local = TRUE)
output$time <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
if(identical(input$intCen,"noint")){
items=names(df)
names(items)=items
selectInput("time", "time",items, selected = "time")
}else{
items=names(df)
names(items)=items
selectInput("time1", "The censoring or event time for right censored data or the last observation time prior to the failure for interval censored data;",items, selected = "lower")
}
})
output$time2 <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
if(identical(input$intCen,"int")){
items=names(df)
names(items)=items
selectInput("time2", "The first observation time after the failure for interval censored data. (Inf for right censored data )",items, selected = "upper")
}
})
output$status <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
items=names(df)
names(items)=items
if(!(identical(input$intCen,"int")&identical(input$CoxorFG,"noComp"))){
selectInput("status", "event", items, selected = ifelse(identical(input$intCen,"int"),"event","status"))
}
})
output$covariate <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
items=names(df)
names(items)=items
selectInput("covariate", "The continuous covariate used for plotting", items,
selected = ifelse(identical(input$CoxorFG,"noComp"),
ifelse(identical(input$intCen,"noint"),"karno","cont"),
ifelse(identical(input$intCen,"noint"),"DSST","continuousCov"))
)
})
output$strataCov <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
if(identical(input$strata,"yes")){
items=names(df)
names(items)=items
selectInput("strataCov", "The categorical covariate used to stratify analysis",
items, selected = ifelse(identical(input$intCen,"int"),"treat","trt"))
}
})
output$otherCovSelect <- renderUI({
df <-filedata()
#if (is.null(df)) return(NULL)
if(identical(input$otherCov,"Yes")){
dfcolnames=colnames(df)
names(dfcolnames)=dfcolnames
selectInput("otherCovSelect", "Other covariates in the model \u2193",
dfcolnames, multiple=TRUE)
}
})
observe({
if(!is.null(input$otherCovSelect)){
df <-filedata()
tableSelcted<-data.frame(df[,input$otherCovSelect])
colnames(tableSelcted)<-input$otherCovSelect
CateorNot<-sapply(tableSelcted,class)%in% c("factor","character")
value4Plot<-sapply(tableSelcted,function(x) names(table(x))[which.max(table(x))])
value4Plot[!CateorNot]<-sapply(data.frame(tableSelcted[,!CateorNot]),median)
output$table <- renderRHandsontable({rhandsontable(data.frame(otherCovName=input$otherCovSelect,
CateorNot=CateorNot,
value4Plot=value4Plot),
rowHeaders = NULL,
colHeaders = c("Covariate Name",
"If Categorical click","Value for \n predicting the outcome"))})
}
})
output$strataName <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
if(identical(input$strata,"yes")){
textInput("strataName", "Name of the strata covariate that will appear on the plot", "")
}
})
output$timeSlider <- renderUI({
dataTable<-filedata()
if(identical(input$intCen,"int")){
if(!identical(input$strata,"yes")){
timecov<-unlist(c(dataTable[,input$time1],dataTable[,input$time2]))
timecov<-timecov[!is.na(timecov)]
timecov<-timecov[is.finite(unlist(timecov))]
maxtime<-max(timecov)
}else{
strataCov<-unique(dataTable[,input$strataCov])
strataCov<-strataCov[!is.na(strataCov)]
if(!is.null(input$strataCov)){
if(!is.null(input$time1)){
if(!is.null(input$time2)){
maxtime<-min(unlist(sapply(strataCov,function(x){
subData<-dataTable[dataTable[,input$strataCov]==x,]
timecov<-c(subData[,input$time1],subData[,input$time2])
timecov<-timecov[!is.na(timecov)]
timecov<-timecov[is.finite(timecov)]
max(timecov)
})))
}
}
}
}
}else{
if(!identical(input$strata,"yes")){
timecov<-dataTable[,input$time]
if(!is.null(input$time)){
maxtime<-max(timecov,na.rm = TRUE)
}
}else{
strataCov<-unique(dataTable[,input$strataCov])
strataCov<-strataCov[!is.na(strataCov)]
if(!is.null(input$strataCov)){
if(!is.null(input$time)){
maxtime<-min(unlist(sapply(strataCov,function(x){
subData<-dataTable[dataTable[,input$strataCov]==x,]
timecov<-subData[,input$time]
max(timecov,na.rm=TRUE)
})))
}
}
}
}
if (is.null(dataTable)) return(NULL)
if(exists("maxtime")){
sliderInput("timeSlider", "The time range for the plot",
min=0,
#max=ifelse(!is.null(isolate(maxtime)),isolate(maxtime),1),
#value = ifelse(!is.null(isolate(maxtime)),isolate(9/10*maxtime),1),
max=ifelse(is.finite(isolate(maxtime)),isolate(maxtime),1),
value = ifelse(is.finite(isolate(maxtime)),isolate(9/10*maxtime),1),
round=3)
}
})
output$covSlider <- renderUI({
dataTable<-filedata()
if (is.null(dataTable)) return(NULL)
contcov<-input$covariate
if(!is.null(contcov)){
if(contcov %in% colnames(dataTable)){
sliderInput("covSlider", "The covariate range for the plot",
min=min(isolate(dataTable[,contcov]),na.rm=TRUE),
max=max(isolate(dataTable[,contcov]),na.rm=TRUE),
value = c(9/10*min(isolate(dataTable[,contcov]),na.rm=TRUE)+
1/10*max(isolate(dataTable[,contcov]),na.rm=TRUE),
1/10*min(isolate(dataTable[,contcov]),na.rm=TRUE)+
9/10*max(isolate(dataTable[,contcov]),na.rm=TRUE)),
round=3)
}
}
# sliderInput("covSlider", "The covariate range for the plot",
#             #min=min(isolate(dataTable[,contcov]),na.rm=TRUE),
#             #max=max(isolate(dataTable[,contcov]),na.rm=TRUE),
#             #value = c(min(isolate(dataTable[,contcov]),na.rm=TRUE)+1/10*max(isolate(dataTable[,contcov]),na.rm=TRUE),
#             #          min(isolate(dataTable[,contcov]),na.rm=TRUE)+9/10*max(isolate(dataTable[,contcov]),na.rm=TRUE)),
#             min=ifelse(!is.null(isolate(dataTable[,contcov])),
#                        min(isolate(dataTable[,contcov]),na.rm=TRUE),0),
#             max=ifelse(!is.null(isolate(dataTable[,contcov])),
#                        max(isolate(dataTable[,contcov]),na.rm=TRUE),1),
#             value = c(ifelse(!is.null(isolate(dataTable[,contcov])),
#                              9/10*min(isolate(dataTable[,contcov]),na.rm=TRUE)+
#                                1/10*max(isolate(dataTable[,contcov]),na.rm=TRUE),0),
#                       ifelse(!is.null(isolate(dataTable[,contcov])),
#                              1/10*min(isolate(dataTable[,contcov]),na.rm=TRUE)+
#                                9/10*max(isolate(dataTable[,contcov]),na.rm=TRUE),1)
#                       ),
#             round=3)
})
output$CI3D <- renderUI({
if(identical(input$strata,"no")&identical(input$CoxorFG,"noComp")){
if(!identical(input$noCompSelect,"rf")){
radioButtons("CI3D", "Do you want to show 95% CI for predicted survival in 3D contour plot?",
list("No, I don't." = "No",
"Yes, I do." = "Yes"),
selected="No")
}
}
})
source("calculateRcode/validateData.R",local=TRUE)
source("calculateRcode/calculatePredict.R",local=TRUE)
source("calculateRcode/contourPlot.R",local=TRUE)
source("calculateRcode/quantilePlot.R",local=TRUE)
source("drawFigureRcode/pEffectsize.R",local=TRUE)
source("drawFigureRcode/drawContour.R",local=TRUE)
source("drawFigureRcode/draw3DContour.R",local=TRUE)
source("drawFigureRcode/drawQuantile.R",local=TRUE)
source("downloadRcode/downloadQPlot.R",local=TRUE)
source("downloadRcode/downloadResult.R",local=TRUE)
observeEvent(input$getPlot, {
updateTabsetPanel(session, "outputtab",selected = "Result")
})
})
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
setwd("/Users/yushushi/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContour/survivalContourPackage")
library(roxygen2)
roxygenize()
install.packages("shinybusy")
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
packageVersion("plotly")
install.packages("plotly")
packageVersion("plotly")
R.version()
R.versions()
packageVersion("shiny")
# Check R version
R.version.string
# Check shiny package version
packageVersion("shiny")
install.packages("shiny")
packageVersion("rshiny")
packageVersion("shiny")
shiny::runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
library(plotly)
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
fig <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
fig
library(plotly)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z = ~volcano)
fig <- fig %>% add_surface()
fig
volcano
str(volcano)
str(z)
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
# fig <- plot_ly(x = ~xaxisValue,
#                y = ~yaxisValue,
#                z = zaxisValue)
# fig <- plot_ly(x = xaxisValue,
#                y = yaxisValue,
#                z = zaxisValue)
#fig<-fig%>% add_surface()
fig <- plot_ly(z = ~volcano)
runApp('~/Library/CloudStorage/GoogleDrive-shiyushu2006@gmail.com/My Drive/WCM/survivalContourRshiny')
remotes::install_github("plotly/plotly")
shiny::runApp()
install.packages("fastmap")
shiny::runApp()
install.packages("/Users/yushushi/Desktop/plotly_4.10.1.tar.gz", repos = NULL, type = "source")
packageVersion("plotly")
shiny::runApp()
install.packages("/Users/yushushi/Desktop/plotly_4.9.4.tar.gz", repos = NULL, type = "source")
packageVersion("plotly")
shiny::runApp()
shiny::runApp()
runApp()
install.packages("plotly")
packageVersion("shiny")
install.packages("/Users/yushushi/Desktop/shiny_1.5.0.tar.gz", repos = NULL, type = "source")
shiny::runApp()
install.packages("/Users/yushushi/Desktop/shiny_1.3.0.tar.gz", repos = NULL, type = "source")
runApp()
runApp()
install.packages("shiny")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
